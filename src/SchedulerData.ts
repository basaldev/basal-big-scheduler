import * as moment from 'moment';
import { RRuleSet, rrulestr } from 'rrule'
import { Config as config } from './Config'
import behaviors from './Behaviors'
import { ViewTypes } from './types/ViewTypes'
import { CellUnits } from './types/CellUnits'
import { DATE_FORMAT } from './types/DateFormats'
import { DATETIME_FORMAT } from './types/DateFormats'
import { Config } from './Config'

export interface RenderData {
    slotId: string,
    slotName: string,
    parentId: string | undefined,
    groupOnly: boolean,
    hasSummary: boolean,
    rowMaxCount: number,
    rowHeight: number,
    headerItems: Header[],
    indent: number,
    hasChildren: boolean,
    expanded: boolean,
    render: true,
}

export interface Header {
    nonWorkingTime: boolean,
    time: string,
    length: number,
    start: string,
    end: string,
    count: number,
    addMore: number,
    addMoreIndex: number,
    summary: any,
    events: any[]
}

export interface EventGroup {
    groupOnly?: boolean
    id: string,
    name: string,
    parentId?: string,
    state: any
}

export interface Event {
    end: string,
    start: string,
    id: string,
    resourceId: string,
    title: string,
    bgColor?: string,
    groupId?: string,
    groupName?: string,
    exdates?: any,
    exrule?: any,
    rrule?: any,
    clickable1?: any,
    clickable2?: any,
    type?: number,
    resizable?: boolean,
    startResizable?: boolean,
    endResizable?: boolean,
    showPopover?: boolean,
    movable?: boolean,
}

export interface EventRecurring {
    recurringEventId: string,
    recurringEventStart: string,
    recurringEventEnd: string,
    id: string,
    start: string,
    end: string
}

export interface Resource {
    groupOnly?: boolean
    id: string,
    name: string,
    parentId?: string,
}

export default class SchedulerData {
    resources: Resource[];
    events: Event[];
    eventGroups: EventGroup[];
    eventGroupsAutoGenerated: boolean;
    viewType: number;
    cellUnit: number;
    showAgenda: boolean;
    isEventPerspective: boolean;
    resizing: boolean;
    scrollToSpecialMoment: boolean;
    documentWidth: number;
    config: typeof Config;
    behaviors: any;
    startDate: string;
    endDate: string;
    selectDate: string;
    renderData: RenderData[];
    headers: Header[];
    constructor(date = moment().format(DATE_FORMAT), viewType = ViewTypes.Week,
        showAgenda = false, isEventPerspective = false,
        newConfig = undefined, newBehaviors = undefined) {

        moment.locale('cs')

        this.resources = [];
        this.events = [];
        this.eventGroups = [];
        this.eventGroupsAutoGenerated = true;
        this.viewType = viewType;
        this.cellUnit = viewType === ViewTypes.Day ? CellUnits.Hour : CellUnits.Day;
        this.showAgenda = showAgenda;
        this.isEventPerspective = isEventPerspective;
        this.resizing = false;
        this.scrollToSpecialMoment = false;
        this.documentWidth = 0;

        this.config = newConfig == undefined ? config : { ...config, ...newConfig };
        this._validateMinuteStep(this.config.minuteStep);
        this.behaviors = newBehaviors == undefined ? behaviors : { ...behaviors, ...newBehaviors };
        this._resolveDate(0, date);
        this._createHeaders();
        this._createRenderData();
    }

    setResources(resources: Resource[]) {
        this._validateResource(resources);
        this.resources = Array.from(new Set(resources));
        this._createRenderData();
        this.setScrollToSpecialMoment(true);
    }

    setEventGroupsAutoGenerated(autoGenerated: boolean) {
        this.eventGroupsAutoGenerated = autoGenerated;
    }

    //optional
    setEventGroups(eventGroups: EventGroup[]) {
        this._validateEventGroups(eventGroups);
        this.eventGroups = Array.from(new Set(eventGroups));
        this.eventGroupsAutoGenerated = false;
        this._createRenderData();
        this.setScrollToSpecialMoment(true);
    }

    setMinuteStep(minuteStep: number) {
        if (this.config.minuteStep !== minuteStep) {
            this._validateMinuteStep(minuteStep);
            this.config.minuteStep = minuteStep;
            this._createHeaders();
            this._createRenderData();
        }
    }

    setBesidesWidth(besidesWidth: number) {
        if (besidesWidth >= 0) {
            this.config.besidesWidth = besidesWidth;
        }
    }

    getMinuteStepsInHour() {
        return 60 / this.config.minuteStep;
    }

    addResource(resource: Resource) {
        let existedResources = this.resources.filter(x => x.id === resource.id);
        if (existedResources.length === 0) {
            this.resources.push(resource);
            this._createRenderData();
        }
    }

    addEventGroup(eventGroup: EventGroup) {
        let existedEventGroups = this.eventGroups.filter(x => x.id === eventGroup.id);
        if (existedEventGroups.length === 0) {
            this.eventGroups.push(eventGroup);
            this._createRenderData();
        }
    }

    removeEventGroupById(eventGroupId: EventGroup["id"]) {
        let index = -1;
        this.eventGroups.forEach((item, idx) => {
            if (item.id === eventGroupId)
                index = idx;
        })
        if (index !== -1)
            this.eventGroups.splice(index, 1);
    }

    containsEventGroupId(eventGroupId: EventGroup["id"]) {
        let index = -1;
        this.eventGroups.forEach((item, idx) => {
            if (item.id === eventGroupId)
                index = idx;
        })
        return index !== -1;
    }

    setEvents(events: Event[]) {
        this._validateEvents(events);
        this.events = Array.from(events);
        if (this.eventGroupsAutoGenerated)
            this._generateEventGroups();
        if (this.config.recurringEventsEnabled)
            this._handleRecurringEvents();

        this._createRenderData();
    }

    setScrollToSpecialMoment(scrollToSpecialMoment: boolean) {
        if (this.config.scrollToSpecialMomentEnabled)
            this.scrollToSpecialMoment = scrollToSpecialMoment;
    }

    prev() {
        this._resolveDate(-1);
        this.events = [];
        this._createHeaders();
        this._createRenderData();
    }

    next() {
        this._resolveDate(1);
        this.events = [];
        this._createHeaders();
        this._createRenderData();
    }

    setDate(date = moment().format(DATE_FORMAT)) {
        this._resolveDate(0, date);
        this.events = [];
        this._createHeaders();
        this._createRenderData();
    }

    setViewType(viewType = ViewTypes.Week, showAgenda: boolean = false, isEventPerspective: boolean = false) {
        this.showAgenda = showAgenda;
        this.isEventPerspective = isEventPerspective;
        this.cellUnit = CellUnits.Day;

        if (this.viewType !== viewType) {
            let date = this.startDate;

            if (viewType === ViewTypes.Custom || viewType === ViewTypes.Custom1 || viewType === ViewTypes.Custom2) {
                this.viewType = viewType;
                this._resolveDate(0, date);
            } else {
                if (this.viewType < viewType) {
                    if (viewType === ViewTypes.Week) {
                        this.startDate = moment(date).startOf('week').format(DATE_FORMAT);
                        this.endDate = moment(this.startDate).endOf('week').format(DATE_FORMAT);
                    }
                    else if (viewType === ViewTypes.Month) {
                        this.startDate = moment(date).startOf('month').format(DATE_FORMAT);
                        this.endDate = moment(this.startDate).endOf('month').format(DATE_FORMAT);
                    }
                    else if (viewType === ViewTypes.Quarter) {
                        this.startDate = moment(date).startOf('quarter').format(DATE_FORMAT);
                        this.endDate = moment(this.startDate).endOf('quarter').format(DATE_FORMAT);
                    }
                    else if (viewType === ViewTypes.Year) {
                        this.startDate = moment(date).startOf('year').format(DATE_FORMAT);
                        this.endDate = moment(this.startDate).endOf('year').format(DATE_FORMAT);
                    }
                }
                else {
                    let start = moment(this.startDate);
                    let end = moment(this.endDate).add(1, 'days');

                    if (this.selectDate !== undefined) {
                        let selectDate = moment(this.selectDate);
                        if (selectDate >= start && selectDate < end) {
                            date = this.selectDate;
                        }
                    }

                    let now = moment();
                    if (now >= start && now < end) {
                        date = now.format(DATE_FORMAT);
                    }

                    if (viewType === ViewTypes.Day) {
                        this.startDate = date;
                        this.endDate = this.startDate;
                        this.cellUnit = CellUnits.Hour;
                    }
                    else if (viewType === ViewTypes.Week) {
                        this.startDate = moment(date).startOf('week').format(DATE_FORMAT);
                        this.endDate = moment(this.startDate).endOf('week').format(DATE_FORMAT);
                    }
                    else if (viewType === ViewTypes.Month) {
                        this.startDate = moment(date).startOf('month').format(DATE_FORMAT);
                        this.endDate = moment(this.startDate).endOf('month').format(DATE_FORMAT);
                    }
                    else if (viewType === ViewTypes.Quarter) {
                        this.startDate = moment(date).startOf('quarter').format(DATE_FORMAT);
                        this.endDate = moment(this.startDate).endOf('quarter').format(DATE_FORMAT);
                    }
                }

                this.viewType = viewType;
            }

            this.events = [];
            this._createHeaders();
            this._createRenderData();
            this.setScrollToSpecialMoment(true);
        }
    }

    setSchedulerMaxHeight(newSchedulerMaxHeight: number) {
        this.config.schedulerMaxHeight = newSchedulerMaxHeight;
    }

    isSchedulerResponsive() {
        return !!this.config.schedulerWidth.endsWith && this.config.schedulerWidth.endsWith("%");
    }

    toggleExpandStatus(slotId: any) {
        let slotEntered = false;
        let slotIndent = -1;
        let isExpanded = false;
        let expandedMap = new Map();
        this.renderData.forEach((item) => {
            if (slotEntered === false) {
                if (item.slotId === slotId && item.hasChildren) {
                    slotEntered = true;

                    isExpanded = !item.expanded;
                    item.expanded = isExpanded;
                    slotIndent = item.indent;
                    expandedMap.set(item.indent, {
                        expanded: item.expanded,
                        render: item.render,
                    });
                }
            } else {
                if (item.indent > slotIndent) {
                    let expandStatus = expandedMap.get(item.indent - 1);
                    item.render = expandStatus.expanded && expandStatus.render;

                    if (item.hasChildren) {
                        expandedMap.set(item.indent, {
                            expanded: item.expanded,
                            render: item.render,
                        });
                    }
                } else {
                    slotEntered = false;
                }
            }
        });
    }

    isResourceViewResponsive() {
        let resourceTableWidth = this.getResourceTableConfigWidth();
        return !!resourceTableWidth.endsWith && resourceTableWidth.endsWith("%");
    }

    isContentViewResponsive() {
        let contentCellWidth = this.getContentCellConfigWidth();
        return !!contentCellWidth.endsWith && contentCellWidth.endsWith("%");
    }

    getSchedulerWidth(): string {
        let baseWidth = this.documentWidth - this.config.besidesWidth > 0 ? this.documentWidth - this.config.besidesWidth : 0;
        return (this.isSchedulerResponsive() ? baseWidth * Number(this.config.schedulerWidth.slice(0, -1)) / 100 : this.config.schedulerWidth).toString();
    }

    getResourceTableWidth(): number {
        let resourceTableConfigWidth = this.getResourceTableConfigWidth();
        let schedulerWidth = parseInt(this.getSchedulerWidth());
        let resourceTableWidth = this.isResourceViewResponsive() ? schedulerWidth * Number(resourceTableConfigWidth.slice(0, -1)) / 100
            : parseInt(resourceTableConfigWidth);
        if (this.isSchedulerResponsive() && (this.getContentTableWidth() + resourceTableWidth < schedulerWidth))
            resourceTableWidth = schedulerWidth - this.getContentTableWidth();
        return resourceTableWidth;
    }

    getContentCellWidth(): number {
        let contentCellConfigWidth = this.getContentCellConfigWidth();
        let schedulerWidth = parseInt(this.getSchedulerWidth());
        return this.isContentViewResponsive() ? schedulerWidth * Number(contentCellConfigWidth.slice(0, -1)) / 100 : parseInt(contentCellConfigWidth);
    }

    getContentTableWidth(): number {
        return this.headers.length * (this.getContentCellWidth());
    }

    getScrollToSpecialMoment(): boolean {
        if (this.config.scrollToSpecialMomentEnabled)
            return this.scrollToSpecialMoment;
        return false;
    }

    getSlots(): EventGroup[] | Resource[] {
        return this.isEventPerspective ? this.eventGroups : this.resources;
    }

    getSlotById(slotId: any): EventGroup | Resource {
        let slots = this.getSlots();
        let slot = undefined;
        slots.forEach((item) => {
            if (item.id === slotId)
                slot = item;
        })
        return slot;
    }

    getResourceById(resourceId: string): Resource {
        let resource = undefined;
        this.resources.forEach((item) => {
            if (item.id === resourceId)
                resource = item;
        })
        return resource;
    }

    getTableHeaderHeight(): number {
        return this.config.tableHeaderHeight;
    }

    getSchedulerContentDesiredHeight(): number {
        let height = 0;
        this.renderData.forEach((item) => {
            if (item.render)
                height += item.rowHeight;
        });
        return height;
    }

    getCellMaxEvents(): number {
        return this.viewType === ViewTypes.Week ? this.config.weekMaxEvents : (
            this.viewType === ViewTypes.Day ? this.config.dayMaxEvents : (
                this.viewType === ViewTypes.Month ? this.config.monthMaxEvents : (
                    this.viewType === ViewTypes.Year ? this.config.yearMaxEvents : (
                        this.viewType === ViewTypes.Quarter ? this.config.quarterMaxEvents :
                            this.config.customMaxEvents
                    )
                )
            )
        );
    }

    getDateLabel(): string {
        let start = moment(this.startDate);
        let end = moment(this.endDate);
        let dateLabel = start.format('LL');

        if (start != end)
            dateLabel = `${start.format('LL')}-${end.format('LL')}`;

        if (!!this.behaviors.getDateLabelFunc)
            dateLabel = this.behaviors.getDateLabelFunc(this, this.viewType, this.startDate, this.endDate);

        return dateLabel;
    }

    addEvent(newEvent: Event) {
        this._attachEvent(newEvent);
        if (this.eventGroupsAutoGenerated)
            this._generateEventGroups();
        this._createRenderData();
    }

    updateEventStart(event: Event, newStart: string) {
        this._detachEvent(event);
        event.start = newStart;
        this._attachEvent(event);
        this._createRenderData();
    }

    updateEventEnd(event: Event, newEnd: string) {
        event.end = newEnd;
        this._createRenderData();
    }

    moveEvent(event: Event, newSlotId: any, newSlotName: string, newStart: string, newEnd: string) {
        this._detachEvent(event);
        if (this.isEventPerspective) {
            event.groupId = newSlotId;
            event.groupName = newSlotName;
        }
        else
            event.resourceId = newSlotId;
        event.end = newEnd;
        event.start = newStart;
        this._attachEvent(event);
        this._createRenderData();
    }

    isEventInTimeWindow(eventStart: any, eventEnd: any, windowStart: any, windowEnd: any): boolean {
        return eventStart < windowEnd && eventEnd > windowStart;
    }

    removeEvent(event: Event) {
        let index = this.events.indexOf(event);
        if (index !== -1) {
            this.events.splice(index, 1);
            this._createRenderData();
        }
    }

    removeEventById(eventId: any) {
        let index = -1;
        this.events.forEach((item, idx) => {
            if (item.id === eventId)
                index = idx;
        })
        if (index !== -1) {
            this.events.splice(index, 1);
            this._createRenderData();
        }
    }

    getResourceTableConfigWidth(): string {
        if (this.showAgenda) return this.config.agendaResourceTableWidth.toString();

        return this.viewType === ViewTypes.Week ? this.config.weekResourceTableWidth : (
            this.viewType === ViewTypes.Day ? this.config.dayResourceTableWidth.toString() : (
                this.viewType === ViewTypes.Month ? this.config.monthResourceTableWidth.toString() : (
                    this.viewType === ViewTypes.Year ? this.config.yearResourceTableWidth.toString() : (
                        this.viewType === ViewTypes.Quarter ? this.config.quarterResourceTableWidth.toString() :
                            this.config.customResourceTableWidth.toString()
                    )
                )
            )
        );
    }

    getContentCellConfigWidth(): string {
        return this.viewType === ViewTypes.Week ? this.config.weekCellWidth.toString() : (
            this.viewType === ViewTypes.Day ? this.config.dayCellWidth.toString() : (
                this.viewType === ViewTypes.Month ? this.config.monthCellWidth.toString() : (
                    this.viewType === ViewTypes.Year ? this.config.yearCellWidth.toString() : (
                        this.viewType === ViewTypes.Quarter ? this.config.quarterCellWidth.toString() :
                            this.config.customCellWidth.toString()
                    )
                )
            )
        );
    }

    setDocumentWidth(documentWidth: number) {
        if (documentWidth >= 0) {
            this.documentWidth = documentWidth;
        }
    }

    _detachEvent(event: Event) {
        let index = this.events.indexOf(event);
        if (index !== -1)
            this.events.splice(index, 1);
    }

    _attachEvent(event: Event) {
        let pos = 0;
        let eventStart = moment(event.start);
        this.events.forEach((item, index) => {
            let start = moment(item.start);
            if (eventStart >= start)
                pos = index + 1;
        });
        this.events.splice(pos, 0, event);
    }

    _handleRecurringEvents() {
        let recurringEvents = this.events.filter(x => !!x.rrule);
        recurringEvents.forEach((item) => {
            this._detachEvent(item);
        });

        recurringEvents.forEach((item) => {
            let windowStart = moment(this.startDate),
                windowEnd = moment(this.endDate).add(1, 'days'),
                oldStart = moment(item.start),
                oldEnd = moment(item.end),
                rule = rrulestr(item.rrule),
                oldDtstart = undefined;
            if (!!rule.origOptions.dtstart) {
                oldDtstart = moment(rule.origOptions.dtstart);
            }
            rule.origOptions.dtstart = oldStart.toDate();
            if (!rule.origOptions.until || windowEnd < moment(rule.origOptions.until)) {
                rule.origOptions.until = windowEnd.toDate();
            }

            //reload
            rule = rrulestr(rule.toString());
            if (item.exdates || item.exrule) {
                const rruleSet = new RRuleSet()
                rruleSet.rrule(rule);
                if (item.exrule) {
                    rruleSet.exrule(rrulestr(item.exrule));
                }
                if (item.exdates) {
                    item.exdates.forEach((exdate) => {
                        rruleSet.exdate(moment(exdate).toDate());
                    });
                }
                rule = rruleSet;
            }

            let all = rule.all();
            let newEvents = all.map((time, index) => {
                return {
                    ...item,
                    recurringEventId: item.id,
                    recurringEventStart: item.start,
                    recurringEventEnd: item.end,
                    id: `${item.id}-${index}`,
                    start: moment(time).format(DATETIME_FORMAT),
                    end: moment(time).add(oldEnd.diff(oldStart), 'ms').format(DATETIME_FORMAT)
                };
            });
            newEvents.forEach((newEvent) => {
                let eventStart = moment(newEvent.start),
                    eventEnd = moment(newEvent.end);
                if (this.isEventInTimeWindow(eventStart, eventEnd, windowStart, windowEnd) && (!oldDtstart || eventStart >= oldDtstart)) {
                    this._attachEvent(newEvent);
                }
            });
        });
    }

    _resolveDate(num: number, date = undefined) {
        if (date != undefined)
            this.selectDate = moment(date).format(DATE_FORMAT);
        this.selectDate = "12-07-2019"

        if (this.viewType === ViewTypes.Week) {


            this.startDate = date != undefined ? moment(date).startOf('week').format(DATE_FORMAT)
                : moment(this.startDate).add(num, 'weeks').format(DATE_FORMAT);
            this.endDate = moment(this.startDate).endOf('week').format(DATE_FORMAT);

        }
        else if (this.viewType === ViewTypes.Day) {
            this.startDate = date != undefined ? this.selectDate
                : moment(this.startDate).add(num, 'days').format(DATE_FORMAT);
            this.endDate = this.startDate;
        }
        else if (this.viewType === ViewTypes.Month) {
            this.startDate = date != undefined ? moment(date).startOf('month').format(DATE_FORMAT)
                : moment(this.startDate).add(num, 'months').format(DATE_FORMAT);
            this.endDate = moment(this.startDate).endOf('month').format(DATE_FORMAT);
        }
        else if (this.viewType === ViewTypes.Quarter) {
            this.startDate = date != undefined ? moment(date).startOf('quarter').format(DATE_FORMAT)
                : moment(this.startDate).add(num, 'quarters').format(DATE_FORMAT);
            this.endDate = moment(this.startDate).endOf('quarter').format(DATE_FORMAT);
        }
        else if (this.viewType === ViewTypes.Year) {
            this.startDate = date != undefined ? moment(date).startOf('year').format(DATE_FORMAT)
                : moment(this.startDate).add(num, 'years').format(DATE_FORMAT);
            this.endDate = moment(this.startDate).endOf('year').format(DATE_FORMAT);
        }
        else if (this.viewType === ViewTypes.Custom || this.viewType === ViewTypes.Custom1 || this.viewType === ViewTypes.Custom2) {
            if (this.behaviors.getCustomDateFunc != undefined) {
                let customDate = this.behaviors.getCustomDateFunc(this, num, date);
                this.startDate = customDate.startDate;
                this.endDate = customDate.endDate;
                if (!!customDate.cellUnit)
                    this.cellUnit = customDate.cellUnit;
            } else {
                throw new Error('This is custom view type, set behaviors.getCustomDateFunc func to resolve the time window(startDate and endDate) yourself');
            }
        }
    }

    _createHeaders() {
        let headers = [],
            start = moment(this.startDate),
            end = moment(this.endDate),
            header = start;

        if (this.showAgenda) {
            headers.push({ time: header.format(DATETIME_FORMAT), nonWorkingTime: false });
        }
        else {
            if (this.cellUnit === CellUnits.Hour) {
                start = start.add(this.config.dayStartFrom, 'hours');
                end = end.add(this.config.dayStopTo, 'hours');
                header = start;

                while (header >= start && header <= end) {
                    let minuteSteps = this.getMinuteStepsInHour();
                    for (let i = 0; i < minuteSteps; i++) {
                        let hour = header.hour();
                        if (hour >= this.config.dayStartFrom && hour <= this.config.dayStopTo) {
                            let time = header.format(DATETIME_FORMAT);
                            let nonWorkingTime = this.behaviors.isNonWorkingTimeFunc(this, time);
                            headers.push({ time: time, nonWorkingTime: nonWorkingTime });
                        }

                        header = header.add(this.config.minuteStep, 'minutes');
                    }
                }
            }
            else {
                while (header >= start && header <= end) {
                    let time = header.format(DATETIME_FORMAT);
                    let dayOfWeek = header.weekday();
                    if (this.config.displayWeekend || (dayOfWeek !== 0 && dayOfWeek !== 6)) {
                        let nonWorkingTime = this.behaviors.isNonWorkingTimeFunc(this, time);
                        headers.push({ time: time, nonWorkingTime: nonWorkingTime });
                    }

                    header = header.add(1, 'days');
                }
            }
        }

        this.headers = headers;
    }

    _createInitHeaderEvents(header: Header) {
        let start = moment(header.time),
            startValue = start.format(DATETIME_FORMAT);
        let endValue = this.showAgenda ? (this.viewType === ViewTypes.Week ? start.add(1, 'weeks').format(DATETIME_FORMAT) : (
            this.viewType === ViewTypes.Day ? start.add(1, 'days').format(DATETIME_FORMAT) : (
                this.viewType === ViewTypes.Month ? start.add(1, 'months').format(DATETIME_FORMAT) : (
                    this.viewType === ViewTypes.Year ? start.add(1, 'years').format(DATETIME_FORMAT) : (
                        this.viewType === ViewTypes.Quarter ? start.add(1, 'quarters').format(DATETIME_FORMAT) :
                            moment(this.endDate).add(1, 'days').format(DATETIME_FORMAT)
                    )
                )
            )
        )) : (this.cellUnit === CellUnits.Hour ? start.add(this.config.minuteStep, 'minutes').format(DATETIME_FORMAT)
            : start.add(1, 'days').format(DATETIME_FORMAT));
        return {
            time: header.time,
            nonWorkingTime: header.nonWorkingTime,
            start: startValue,
            end: endValue,
            count: 0,
            addMore: 0,
            addMoreIndex: 0,
            events: [, , ,],
        };
    }

    _createHeaderEvent(render: any, span: any, eventItem: Event) {
        return {
            render: render,
            span: span,
            eventItem: eventItem
        };
    }

    getEventSlotId(event: Event) {
        return this.isEventPerspective ? this._getEventGroupId(event) : event.resourceId;
    }

    _getEventGroupId(event: Event): string {
        return !!event.groupId ? event.groupId.toString() : event.id.toString();
    }

    _getEventGroupName(event: Event): string {
        return !!event.groupName ? event.groupName : event.title;
    }

    _generateEventGroups() {
        let eventGroups: EventGroup[] = [];
        let set = new Set();
        this.events.forEach((item) => {
            let groupId = this._getEventGroupId(item);
            let groupName = this._getEventGroupName(item);

            if (!set.has(groupId)) {
                let a: EventGroup = {
                    id: groupId,
                    name: groupName,
                    state: item,
                }
                eventGroups.push(a);
                set.add(groupId);
            }
        })
        this.eventGroups = eventGroups;
    }

    _createInitRenderData(isEventPerspective: boolean, eventGroups: EventGroup[], resources: Resource[], headers: Header[]): RenderData[] {
        let slots = isEventPerspective ? eventGroups : resources;
        let slotTree = [],
            slotMap = new Map();
        slots.forEach((slot) => {
            let headerEvents = headers.map((header) => {
                return this._createInitHeaderEvents(header);
            });

            let slotRenderData = {
                slotId: slot.id,
                slotName: slot.name,
                parentId: slot.parentId,
                groupOnly: slot.groupOnly,
                hasSummary: false,
                rowMaxCount: 0,
                rowHeight: this.config.nonAgendaSlotMinHeight !== 0 ? this.config.nonAgendaSlotMinHeight : this.config.eventItemLineHeight + 2,
                headerItems: headerEvents,
                indent: 0,
                hasChildren: false,
                expanded: true,
                render: true,
            };
            let id = slot.id;
            let value = undefined;
            if (slotMap.has(id)) {
                value = slotMap.get(id);
                value.data = slotRenderData;
            } else {
                value = {
                    data: slotRenderData,
                    children: [],
                };
                slotMap.set(id, value);
            }

            let parentId = slot.parentId;
            if (!parentId || parentId === id) {
                slotTree.push(value);
            } else {
                let parentValue = undefined;
                if (slotMap.has(parentId)) {
                    parentValue = slotMap.get(parentId);
                } else {
                    parentValue = {
                        data: undefined,
                        children: [],
                    };
                    slotMap.set(parentId, parentValue);
                }

                parentValue.children.push(value);
            }
        });

        let slotStack = [];
        let i;
        for (i = slotTree.length - 1; i >= 0; i--) {
            slotStack.push(slotTree[i]);
        }
        let initRenderData = [];
        let currentNode = undefined;
        while (slotStack.length > 0) {
            currentNode = slotStack.pop();
            if (currentNode.data.indent > 0) {
                currentNode.data.render = this.config.defaultExpanded;
            }
            if (currentNode.children.length > 0) {
                currentNode.data.hasChildren = true;
                currentNode.data.expanded = this.config.defaultExpanded;
            }
            initRenderData.push(currentNode.data);

            for (i = currentNode.children.length - 1; i >= 0; i--) {
                currentNode.children[i].data.indent = currentNode.data.indent + 1;
                slotStack.push(currentNode.children[i]);
            }
        }

        return initRenderData;
    }

    _getSpan(startTime: moment.MomentInput, endTime: string, headers: Header[]): number {
        if (this.showAgenda) return 1;

        let start = moment(startTime),
            end = moment(endTime),
            span = 0;

        for (let header of headers) {
            let spanStart = moment(header.time),
                spanEnd = this.cellUnit === CellUnits.Hour ? moment(header.time).add(this.config.minuteStep, 'minutes')
                    : moment(header.time).add(1, 'days');

            if (spanStart < end && spanEnd > start) {
                span++;
            }
        }

        return span;
    }

    _validateResource(resources) {
        if (Object.prototype.toString.call(resources) !== "[object Array]") {
            throw new Error('Resources should be Array object');
        }

        resources.forEach((item, index) => {
            if (item == undefined) {
                console.error(`Resource undefined: ${index}`);
                throw new Error(`Resource undefined: ${index}`);
            }
            if (item.id == undefined || item.name == undefined) {
                console.error('Resource property missed', index, item);
                throw new Error(`Resource property undefined: ${index}`);
            }
        });
    }

    _validateEventGroups(eventGroups: EventGroup[]) {
        if (Object.prototype.toString.call(eventGroups) !== "[object Array]") {
            throw new Error('Event groups should be Array object');
        }

        eventGroups.forEach((item, index) => {
            if (item == undefined) {
                console.error(`Event group undefined: ${index}`);
                throw new Error(`Event group undefined: ${index}`);
            }
            if (item.id == undefined || item.name == undefined) {
                console.error('Event group property missed', index, item);
                throw new Error(`Event group property undefined: ${index}`);
            }
        });
    }

    _validateEvents(events: Event[]) {
        if (Object.prototype.toString.call(events) !== "[object Array]") {
            throw new Error('Events should be Array object');
        }

        events.forEach((e, index) => {
            if (e == undefined) {
                console.error(`Event undefined: ${index}`);
                throw new Error(`Event undefined: ${index}`);
            }
            if (e.id == undefined || e.resourceId == undefined || e.title == undefined || e.start == undefined || e.end == undefined) {
                console.error('Event property missed', index, e);
                throw new Error(`Event property undefined: ${index}`);
            }
        });
    }

    _validateMinuteStep(minuteStep: number) {
        if (60 % minuteStep !== 0) {
            console.error('Minute step is not set properly - 60 minutes must be divisible without remainder by this number');
            throw new Error('Minute step is not set properly - 60 minutes must be divisible without remainder by this number');
        }
    }

    _compare(event1: Event, event2: Event): number {
        let start1 = moment(event1.start), start2 = moment(event2.start);
        if (start1 !== start2) return start1 < start2 ? -1 : 1;

        let end1 = moment(event1.end), end2 = moment(event2.end);
        if (end1 !== end2) return end1 < end2 ? -1 : 1;

        return event1.id < event2.id ? -1 : 1;
    }

    _createRenderData() {
        let initRenderData = this._createInitRenderData(this.isEventPerspective, this.eventGroups, this.resources, this.headers);
        //this.events.sort(this._compare);
        let cellMaxEventsCount = this.getCellMaxEvents();
        const cellMaxEventsCountValue = 30;

        this.events.forEach((item) => {
            let resourceEventsList = initRenderData.filter(x => x.slotId === this.getEventSlotId(item));
            if (resourceEventsList.length > 0) {
                let resourceEvents = resourceEventsList[0];
                let span = this._getSpan(item.start, item.end, this.headers);
                let eventStart = moment(item.start), eventEnd = moment(item.end);
                let pos = -1;

                resourceEvents.headerItems.forEach((header, index) => {
                    let headerStart = moment(header.start), headerEnd = moment(header.end);
                    if (headerEnd > eventStart && headerStart < eventEnd) {
                        header.count = header.count + 1;
                        if (header.count > resourceEvents.rowMaxCount) {
                            resourceEvents.rowMaxCount = header.count;
                            let rowsCount = (cellMaxEventsCount <= cellMaxEventsCountValue && resourceEvents.rowMaxCount > cellMaxEventsCount) ? cellMaxEventsCount : resourceEvents.rowMaxCount;
                            let newRowHeight = rowsCount * this.config.eventItemLineHeight + (this.config.creatable && this.config.checkConflict === false ? 20 : 2);
                            if (newRowHeight > resourceEvents.rowHeight)
                                resourceEvents.rowHeight = newRowHeight;
                        }

                        if (pos === -1) {
                            let tmp = 0;
                            while (header.events[tmp] !== undefined)
                                tmp++;

                            pos = tmp;
                        }
                        let render = headerStart <= eventStart || index === 0;
                        if (render === false) {
                            let previousHeader = resourceEvents.headerItems[index - 1];
                            let previousHeaderStart = moment(previousHeader.start), previousHeaderEnd = moment(previousHeader.end);
                            if (previousHeaderEnd <= eventStart || previousHeaderStart >= eventEnd)
                                render = true;
                        }
                        header.events[pos] = this._createHeaderEvent(render, span, item);
                    }
                });
            }
        });

        if (cellMaxEventsCount <= cellMaxEventsCountValue || this.behaviors.getSummaryFunc !== undefined) {
            initRenderData.forEach((resourceEvents) => {
                let hasSummary = false;

                resourceEvents.headerItems.forEach((headerItem) => {
                    if (cellMaxEventsCount <= cellMaxEventsCountValue) {
                        let renderItemsCount = 0, addMoreIndex = 0, index = 0;
                        while (index < cellMaxEventsCount - 1) {
                            if (headerItem.events[index] !== undefined) {
                                renderItemsCount++;
                                addMoreIndex = index + 1;
                            }

                            index++;
                        }

                        if (headerItem.events[index] !== undefined) {
                            if (renderItemsCount + 1 < headerItem.count) {
                                headerItem.addMore = headerItem.count - renderItemsCount;
                                headerItem.addMoreIndex = addMoreIndex;
                            }
                        }
                        else {
                            if (renderItemsCount < headerItem.count) {
                                headerItem.addMore = headerItem.count - renderItemsCount;
                                headerItem.addMoreIndex = addMoreIndex;
                            }
                        }
                    }

                    if (this.behaviors.getSummaryFunc !== undefined) {
                        let events = [];
                        headerItem.events.forEach((e) => {
                            if (!!e && !!e.eventItem)
                                events.push(e.eventItem);
                        });

                        headerItem.summary = this.behaviors.getSummaryFunc(this, events, resourceEvents.slotId, resourceEvents.slotName, headerItem.start, headerItem.end);
                        if (!!headerItem.summary && headerItem.summary.text != undefined)
                            hasSummary = true;
                    }
                });

                resourceEvents.hasSummary = hasSummary;
                if (hasSummary) {
                    let rowsCount = (cellMaxEventsCount <= cellMaxEventsCountValue && resourceEvents.rowMaxCount > cellMaxEventsCount) ? cellMaxEventsCount : resourceEvents.rowMaxCount;
                    let newRowHeight = (rowsCount + 1) * this.config.eventItemLineHeight + (this.config.creatable && this.config.checkConflict === false ? 20 : 2);
                    if (newRowHeight > resourceEvents.rowHeight)
                        resourceEvents.rowHeight = newRowHeight;
                }
            });
        }

        this.renderData = initRenderData;
    }

    startResizing() {
        this.resizing = true;
    }

    stopResizing() {
        this.resizing = false;
    }

    isResizing(): boolean {
        return this.resizing;
    }
}


